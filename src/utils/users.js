const users = [];

// add user to track a new user
// every single connection to the server has a unique id generated by socket.io
const addUser = ({id, username, room}) => {
    // Clean and validate the data
    username = username.trim().toLowerCase();
    room = room.trim().toLowerCase();

    if(!username || !room)
        return { error: 'Username and room are required' };
    
    // Check for existing user
    const existingUser = users.find((user) => {
        return user.room === room && user.username === username;
    });

    if(existingUser)
        return { error: 'Username taken' };

    // If all data is valid, store it
    const user = { id, username, room };
    users.push(user);
    return { user };
};

// remove user, to remove them from tracking
const removeUser = (id) => {
    // findIndex returns position of the item when matched
    // 0 or greater if found, -1 if not found
    const index = users.findIndex((user) => user.id === id)

    if (index !== -1) {
        return users.splice(index, 1)[0]
    }
};

// get user to fetch an existing user's data
const getUser = (id) => {
    return users.find((user) => user.id === id)
};

// get user in room, to get a list of all users in a room
// use filter to return an array of users whose room match the provided room
const getUsersInRoom = (room) => {
    room = room.trim().toLowerCase()
    return users.filter((user) => user.room === room)
};

module.exports = {
    addUser,
    removeUser,
    getUser,
    getUsersInRoom
};